//
//  DBHelper.m
//  ChuJinZhaoPin
//
//  Created by eims on 2018/12/7.
//  Copyright © 2018 Monster. All rights reserved.
//

#import "DBHelper.h"
#import <FMDB/FMDB.h>
#import "ECTextMessageBody.h"
@interface DBHelper()
@property (nonatomic, strong) FMDatabase *db;
@end

@implementation DBHelper

+ (id)sharedDataBase {
    static DBHelper *DBHelper = nil;
    static dispatch_once_t pred;
    dispatch_once(&pred, ^{
        DBHelper = [[self alloc] init];
        [DBHelper initDataBase];
    });
    return DBHelper;
}
-(void)initDataBase{
    // 文件路径
    NSString *filePath = [NSHomeDirectory() stringByAppendingFormat:@"/Documents/%@",@"ChatDB.sqlite"];
    // 实例化FMDataBase对象
    _db = [FMDatabase databaseWithPath:filePath];
    NSLog(@"%@",filePath);
    // 初始化数据表
    NSString *creatChatListSql = @"create table if not exists ChatListTB ('id' TEXT PRIMARY KEY NOT NULL ,'selfId' TEXT, 'otherId' TEXT,'nick_name' TEXT, 'headUrl' TEXT ,'message' TEXT ,'creat_time' LONG)";
    
    NSString *creatChatRecoderSql = @"create table if not exists 'ChatRecoderTB' ('id'  INTEGER PRIMARY KEY AUTOINCREMENT  NOT NULL , 'msgId' text,'fromId' text, 'toId' text ,'message' text ,'creat_time' long)";
    if ([_db open])
    {
        BOOL result = [_db executeUpdate:creatChatListSql];
        if (result)
        {
            NSLog(@"创建ChatList表成功");
        }else{
            NSLog(@"创建ChatList表失败");
            
        }
        
        BOOL result2 = [_db executeUpdate:creatChatRecoderSql];
        if (result2)
        {
            NSLog(@"创建ChatRecoder表成功");
        }else{
            NSLog(@"创建ChatRecoder表失败");
            
        }
    }
    
    
    //关闭数据库
    [_db close];
    
}

/**
 添加聊天列表

 @param msg (ChatListModel *)msg
 @return BOOL
 */
-(BOOL)addChatListRecord:(ChatListModel *)msg{
    [_db open];
    
    
    //先判断是否已存在，存在即不添加
    BOOL isExit = NO;
        
    FMResultSet *res = [_db executeQuery:@"SELECT * FROM ChatListTB where id = ?",msg.ID];
    isExit = [res next];
    
    
    BOOL isSuccess;
    if (isExit) {
        
        isSuccess = [_db executeUpdate:@"update ChatListTB set selfId=?, otherId=?, nick_name=?, headUrl=? ,message=? ,creat_time=? where id = ?",msg.selfId, msg.otherId, msg.nick_name, msg.headUrl, msg.message, @(msg.creat_time), msg.ID];
    }else{
       isSuccess = [_db executeUpdate:@"INSERT INTO ChatListTB (id ,selfId, otherId, nick_name, headUrl ,message ,creat_time)VALUES(?, ?, ?, ?, ?, ?, ?)",msg.ID,msg.selfId, msg.otherId, msg.nick_name, msg.headUrl, msg.message, @(msg.creat_time)];
    }
    
    
    [_db close];
    if (isSuccess) {
        NSLog(@"添加一条搜索记录成功");
        return YES;
    }else{
        NSLog(@"添加一条搜索记录失败");
        return NO;
    }
}

/**
 删除聊天列表

 @param msgId 列表id
 @return BOOL
 */
-(BOOL)deleteChatListRecord:(NSString *)msgId{
    [_db open];
    
    
    BOOL isSuccess = [_db executeUpdate:@"delete from ChatListTB where id = ?",msgId];
    [_db close];
    
    
    if (isSuccess) {
        NSLog(@"删除一条搜索记录成功");
        return YES;
    }else{
        NSLog(@"删除一条搜索记录失败");
        return NO;
        
    }
}

/**
 查询聊天列表

 @param selfId 自己Id
 @return (NSArray<ChatListModel *> *)
 */
- (NSArray<ChatListModel *> *)getAllChatListRecord:(NSString *)selfId{
    
    [_db open];
    
    NSMutableArray *dataArray = [[NSMutableArray alloc] init];
    
    FMResultSet *res = [_db executeQuery:@"SELECT * FROM ChatListTB where selfId = ?",selfId];
    //id ,selfId, otherId, nick_name, headUrl ,message ,creat_time
    while ([res next]) {
        ChatListModel *model = [ChatListModel new];
        model.ID = [res stringForColumn:@"id"];
        model.selfId = [res stringForColumn:@"selfId"];
        model.otherId = [res stringForColumn:@"otherId"];
        model.nick_name = [res stringForColumn:@"nick_name"];
        model.headUrl = [res stringForColumn:@"headUrl"];
        model.message = [res stringForColumn:@"message"];
        model.creat_time = [res longLongIntForColumn:@"creat_time"];
        
        [dataArray addObject:model];
    }
    
    [_db close];
    
    return dataArray;
    
}

/**
 查询msgId

 @param selfId 自己id
 @param otherId 对方id
 @return msgid
 */
-(NSString *)selectMsgIdWithSelfId:(NSString *)selfId otherId:(NSString *)otherId{
    [_db open];
    
    FMResultSet *res = [_db executeQuery:@"select * from ChatListTB where selfId = ? and otherId = ?",selfId, otherId];
    
    NSString *msgId;
    if ([res next]) {
        
       msgId = [res stringForColumn:@"id"];
    }else{
        msgId = nil;
    }
    [_db close];
    
    return msgId;
}


/**
 添加聊天记录

 @param msg (ECMessage *)msg
 @return BOOL
 */
-(BOOL)addChatRecord:(ECMessage *)msg{
    [_db open];
    NSString *content;
    if (msg.messageBody.messageBodyType == MessageBodyType_Text) {
        content = [(ECTextMessageBody *)msg.messageBody text];
    }
    BOOL isSuccess = [_db executeUpdate:@"INSERT INTO ChatRecoderTB (msgId, fromId, toId, message ,creat_time)VALUES(?, ?, ?, ?, ?)",msg.sessionId,msg.from, msg.to, content, @(msg.timestamp.integerValue)];
    
    [_db close];
    return isSuccess;
}

/**
 查询聊天记录

 @param msgId 聊天列表id
 @return NSArray<ECMessage *>
 */
-(NSArray<ECMessage *> *)queryAllChatRecoderWithMsgId:(NSString *)msgId{
    [_db open];
    
    NSMutableArray *dataArray = [[NSMutableArray alloc] init];
    
    FMResultSet *res = [_db executeQuery:@"SELECT * FROM ChatRecoderTB where msgId = ?",msgId];
    //id ,selfId, otherId, nick_name, headUrl ,message ,creat_time
    while ([res next]) {
        ECMessage *msg = [ECMessage new];
        
        msg.messageId = [NSString stringWithFormat:@"%d",[res intForColumn:@"id"]];
        msg.sessionId = [res stringForColumn:@"msgId"];
        msg.from = [res stringForColumn:@"fromId"];
        msg.to = [res stringForColumn:@"toId"];
        msg.timestamp = [NSString stringWithFormat:@"%ld", [res longForColumn:@"creat_time"]];
        ECTextMessageBody *body = [[ECTextMessageBody alloc]initWithText:[res stringForColumn:@"message"]];
        msg.messageBody = body;
        [dataArray addObject:msg];
    }
    
    [_db close];
    
    return  dataArray;
}
@end
