//
//  AppDelegate+ThirdConfig.m
//  ChuJinZhaoPin
//
//  Created by zhaohaohao on 2018/12/4.
//  Copyright © 2018年 Monster. All rights reserved.
//

#import "AppDelegate+ThirdConfig.h"

#import <UMCommon/UMCommon.h>
#import <UMShare/UMSocialManager.h>

#import "QMChatRoomViewController.h"
#import <QMLineSDK/QMLineSDK.h>
#import "QMChatRoomGuestBookViewController.h"
#import "QMAlert.h"
#import "QMManager.h"

#import "MainTabBarController.h"
#import "BaseNavigationController.h"

#import <CL_ShanYanSDK/CL_ShanYanSDK.h>

//闪验
#define cl_SDK_APPID    @"TwF8j8Gn"//@"eWWfA2KJ"
#define cl_SDK_APPKEY   @"N0tj79HS"//@"tDo3Ml2K"

//真实
static NSString *UMKey = @"5c05f174f1f5565289000078";
static NSString *WXAppKey = @"wx7056a4c61d870673";
static NSString *WXAppSecret = @"240aa225fb46bae67ba85a0ad4668a14";
static NSString *QQAppKey = @"1107838458";//@"101519893";
static NSString *QQAppSecret = @"39r4sfyoqFHXAFgh";//@"0eda41a868380aeef4d8d5ad9166cc5e";
static NSString *SinaAppKey = @"2300533974";
static NSString *SinaAppSecret = @"4be91101699d1820b0eafe91e3cc443d";



@implementation AppDelegate (ThirdConfig)


-(void)shanYanInit{
    [CLShanYanSDKManager initWithAppId:cl_SDK_APPID AppKey:cl_SDK_APPKEY timeOut
                                      :5 complete:^(CLCompleteResult * _Nonnull completeResult) {
                                          if (completeResult.error) {
                                              NSLog(@"闪验SDK初始化：%@",completeResult.error);
                                          }
                                          NSLog(@"%@",completeResult.message);
                                      }];
}




- (void)thirdConfig{
    //友盟配置
    [self configUmeng];
}
#pragma  mark --友盟相关
- (void)configUmeng{
    
    //初始化
    [UMConfigure initWithAppkey:UMKey channel:@"12"];

    //2,注册各个平台的AppKey和AppID
    /* 微信聊天 */
    BOOL WechatSession  =  [[UMSocialManager defaultManager] setPlaform:UMSocialPlatformType_WechatSession appKey:WXAppKey appSecret:WXAppSecret redirectURL:@"http://mobile.umeng.com/social"];
    if (!WechatSession) {
        NSLog(@"setPlaform WechatSession  failed!");
    }
    
    /*QQ*/
    BOOL QQSession =  [[UMSocialManager defaultManager] setPlaform:UMSocialPlatformType_QQ appKey:QQAppKey  appSecret:QQAppSecret redirectURL:@"http://mobile.umeng.com/social"];
    if (!QQSession) {
        NSLog(@"setPlaform QQSession  failed!");
    }
    
    /*
     注**
     redirectURL必须要和微博设置的回调一致
     */
    /* 新浪 */
    BOOL SinaSession =  [[UMSocialManager defaultManager] setPlaform:UMSocialPlatformType_Sina appKey:SinaAppKey appSecret:SinaAppSecret redirectURL:@"https://sns.whalecloud.com/sina2/callback"];
    if (!SinaSession) {
        NSLog(@"setPlaform SinaSession  failed!");
    }
    
    
}

/**
 配置七陌客服
 */
-(void)qiMoKeFu{
    
    self.isConnecting = NO;
    self.isPushed = NO;
    
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(registerSuccess:) name:CUSTOM_LOGIN_SUCCEED object:nil];
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(registerFailure:) name:CUSTOM_LOGIN_ERROR_USER object:nil];
}

- (void)registerSuccess:(NSNotification *)sender {
    NSLog(@"注册成功");
    
    if ([QMManager defaultManager].selectedPush) {
        [self showChatRoomViewController:@"" processType:@"" entranceId:@""]; //
    }else{
        
        // 页面跳转控制
        if (self.isPushed) {
            return;
        }
        
        [QMConnect sdkGetWebchatScheduleConfig:^(NSDictionary * _Nonnull scheduleDic) {
            dispatch_async(dispatch_get_main_queue(), ^{
                self.dictionary = scheduleDic;
                if ([self.dictionary[@"scheduleEnable"] intValue] == 1) {
                    NSLog(@"日程管理");
                    [self starSchedule];
                }else{
                    NSLog(@"技能组");
                    [self getPeers];
                }
            });
        } failBlock:^{
            [self getPeers];
        }];
    }
    
    [QMManager defaultManager].selectedPush = NO;
    
}

- (void)registerFailure:(NSNotification *)sender {
    NSLog(@"注册失败::%@", sender.object);
    self.isConnecting = NO;
    [HUD dissmissShowView:nil];
}

#pragma mark - 技能组选择
- (void)getPeers {
    [QMConnect sdkGetPeers:^(NSArray * _Nonnull peerArray) {
        dispatch_async(dispatch_get_main_queue(), ^{
            NSArray *peers = peerArray;
            self.isConnecting = NO;
            [HUD dissmissShowView:nil];
            if (peers.count == 1 && peers.count != 0) {
                [self showChatRoomViewController:[peers.firstObject objectForKey:@"id"] processType:@"" entranceId:@""];
            }else {
                [self showPeersWithAlert:peers messageStr:NSLocalizedString(@"title.type", nil)];
            }
        });
    } failureBlock:^{
        dispatch_async(dispatch_get_main_queue(), ^{
            [HUD dissmissShowView:nil];
            self.isConnecting = NO;
        });
    }];
}

#pragma mark - 日程管理
- (void)starSchedule {
    self.isConnecting = NO;
    [HUD dissmissShowView:nil];
    if ([self.dictionary[@"scheduleId"]  isEqual: @""] || [self.dictionary[@"processId"]  isEqual: @""] || [self.dictionary objectForKey:@"entranceNode"] == nil || [self.dictionary objectForKey:@"leavemsgNodes"] == nil) {
        [QMAlert showMessage:NSLocalizedString(@"title.sorryconfigurationiswrong", nil)];
    }else{
        NSDictionary *entranceNode = self.dictionary[@"entranceNode"];
        NSArray *entrances = entranceNode[@"entrances"];
        if (entrances.count == 1 && entrances.count != 0) {
            [self showChatRoomViewController:[entrances.firstObject objectForKey:@"processTo"] processType:[entrances.firstObject objectForKey:@"processType"] entranceId:[entrances.firstObject objectForKey:@"_id"]];
        }else{
            [self showPeersWithAlert:entrances messageStr:NSLocalizedString(@"title.schedule_type", nil)];
        }
    }
}

- (void)showPeersWithAlert: (NSArray *)peers messageStr: (NSString *)message {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:nil message:NSLocalizedString(@"title.type", nil) preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"button.cancel", nil) style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
        self.isConnecting = NO;
    }];
    [alertController addAction:cancelAction];
    for (NSDictionary *index in peers) {
        UIAlertAction *surelAction = [UIAlertAction actionWithTitle:[index objectForKey:@"name"] style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            if ([self.dictionary[@"scheduleEnable"] integerValue] == 1) {
                [self showChatRoomViewController:[index objectForKey:@"processTo"] processType:[index objectForKey:@"processType"] entranceId:[index objectForKey:@"_id"]];
            }else{
                [self showChatRoomViewController:[index objectForKey:@"id"] processType:@"" entranceId:@""];
            }
        }];
        [alertController addAction:surelAction];
    }
    UIViewController *rootVC = AppDelegateInstance.window.rootViewController;
    if ([rootVC isKindOfClass:[MainTabBarController class]]) {
        MainTabBarController *tabVC = (MainTabBarController *)rootVC;
        [((BaseNavigationController *)tabVC.selectedViewController) presentViewController:alertController animated:YES completion:nil];
    }
    //[self presentViewController:alertController animated:YES completion:nil];
}

#pragma mark - 跳转聊天界面
- (void)showChatRoomViewController:(NSString *)peerId processType:(NSString *)processType entranceId:(NSString *)entranceId {
    QMChatRoomViewController *chatRoomViewController = [[QMChatRoomViewController alloc] init];
    chatRoomViewController.peerId = peerId;
    chatRoomViewController.isPush = NO;
    chatRoomViewController.avaterStr = AppDelegateInstance.userModel.head;
    if ([self.dictionary[@"scheduleEnable"] intValue] == 1) {
        chatRoomViewController.isOpenSchedule = true;
        chatRoomViewController.scheduleId = self.dictionary[@"scheduleId"];
        chatRoomViewController.processId = self.dictionary[@"processId"];
        chatRoomViewController.currentNodeId = peerId;
        chatRoomViewController.processType = processType;
        chatRoomViewController.entranceId = entranceId;
    }else{
        chatRoomViewController.isOpenSchedule = false;
    }
    
    UIViewController *rootVC = AppDelegateInstance.window.rootViewController;
    if ([rootVC isKindOfClass:[MainTabBarController class]]) {
        MainTabBarController *tabVC = (MainTabBarController *)rootVC;
        [((BaseNavigationController *)tabVC.selectedViewController) pushViewController:chatRoomViewController animated:YES];
    }
    //[self.navigationController pushViewController:chatRoomViewController animated:YES];
}

-(void)dealloc{
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:CUSTOM_LOGIN_SUCCEED object:nil];
    [[NSNotificationCenter defaultCenter] removeObserver:self name:CUSTOM_LOGIN_ERROR_USER object:nil];
}

@end
